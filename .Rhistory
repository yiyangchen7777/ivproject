geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = scales::percent(pct, accuracy = 0.1)), vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max(pdat$pct)*1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "#111", color = NA),
panel.background = element_rect(fill = "#111", color = NA),
panel.grid.major.x = element_line(color = "#333"),
panel.grid.major.y = element_blank(),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
server <- function(input, output, session){
# Just placeholder frames
output$p_bar_anxiety_levels <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Bar chart placeholder")
})
output$p_donut_gender <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Donut chart placeholder")
})
output$p_ts_5y <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Time series placeholder")
})
}
output$p_bar_anxiety_levels <- renderPlot({
df <- filtered_data()
validate(need("GADE_cat" %in% names(df), "Column 'GADE' not found or empty."))
pdat <- df %>%
filter(!is.na(GADE_cat)) %>%
count(GADE_cat, name = "n") %>%
mutate(pct = n / sum(n)) %>%
# 完整四类都列出来（即使某一类为0也显示）
complete(GADE_cat = factor(levels(df$GADE_cat), levels = levels(df$GADE_cat)), fill = list(n = 0, pct = 0)) %>%
arrange(desc(pct))
ggplot(pdat, aes(x = GADE_cat, y = pct)) +
geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = scales::percent(pct, accuracy = 0.1)), vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, max(pdat$pct)*1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background = element_rect(fill = "#111", color = NA),
panel.background = element_rect(fill = "#111", color = NA),
panel.grid.major.x = element_line(color = "#333"),
panel.grid.major.y = element_blank(),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
# ---------- SERVER (put everything inside here) ----------
server <- function(input, output, session){
# If you have filters in the sidebar, apply them here; otherwise, just use data_global.
filtered_data <- reactive({
df <- data_global
# Optional filters (only run if columns exist)
if ("Gender" %in% names(df) && input$gender_sel %in% c("Male","Female","Other","Prefer not to say")) {
df <- dplyr::filter(df, Gender == input$gender_sel)
}
if ("Age" %in% names(df) && !any(is.na(input$age_rng))) {
df <- df %>% filter(!is.na(Age), between(Age, input$age_rng[1], input$age_rng[2]))
}
df
})
# ---- Chart 1: GADE distribution (bar) ----
output$p_bar_anxiety_levels <- renderPlot({
df <- filtered_data()
validate(need("GADE_cat" %in% names(df), "Column 'GADE' not found or empty."))
pdat <- df %>%
filter(!is.na(GADE_cat)) %>%
count(GADE_cat, name = "n") %>%
mutate(pct = n / sum(n)) %>%
# ensure all 4 levels are shown even if 0
complete(GADE_cat = factor(levels(df$GADE_cat), levels = levels(df$GADE_cat)),
fill = list(n = 0, pct = 0)) %>%
arrange(desc(pct))
ggplot(pdat, aes(x = GADE_cat, y = pct)) +
geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = percent_format(accuracy = 1),
limits = c(0, max(pdat$pct) * 1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background   = element_rect(fill = "#111", color = NA),
panel.background  = element_rect(fill = "#111", color = NA),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#333"),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
# ---- Other two placeholders (keep inside server) ----
output$p_donut_gender <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Donut chart placeholder")
})
output$p_ts_5y <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Time series placeholder")
})
}
shinyApp(ui, server)
# ---------- SERVER (put everything inside here) ----------
server <- function(input, output, session){
# If you have filters in the sidebar, apply them here; otherwise, just use anxiety_au_advanced.
filtered_data <- reactive({
df <- anxiety_au_advanced
# Optional filters (only run if columns exist)
if ("Gender" %in% names(df) && input$gender_sel %in% c("Male","Female","Other","Prefer not to say")) {
df <- dplyr::filter(df, Gender == input$gender_sel)
}
if ("Age" %in% names(df) && !any(is.na(input$age_rng))) {
df <- df %>% filter(!is.na(Age), between(Age, input$age_rng[1], input$age_rng[2]))
}
df
})
# ---- Chart 1: GADE distribution (bar) ----
output$p_bar_anxiety_levels <- renderPlot({
df <- filtered_data()
validate(need("GADE_cat" %in% names(df), "Column 'GADE' not found or empty."))
pdat <- df %>%
filter(!is.na(GADE_cat)) %>%
count(GADE_cat, name = "n") %>%
mutate(pct = n / sum(n)) %>%
# ensure all 4 levels are shown even if 0
complete(GADE_cat = factor(levels(df$GADE_cat), levels = levels(df$GADE_cat)),
fill = list(n = 0, pct = 0)) %>%
arrange(desc(pct))
ggplot(pdat, aes(x = GADE_cat, y = pct)) +
geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = percent_format(accuracy = 1),
limits = c(0, max(pdat$pct) * 1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background   = element_rect(fill = "#111", color = NA),
panel.background  = element_rect(fill = "#111", color = NA),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#333"),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
# ---- Other two placeholders (keep inside server) ----
output$p_donut_gender <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Donut chart placeholder")
})
output$p_ts_5y <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Time series placeholder")
})
}
shinyApp(ui, server)
ui <- navbarPage(
# navbar title
title = "Australian Anxiety Dashboard",
theme = shinytheme("cyborg"),
collapsible = TRUE,
inverse = TRUE,
tabPanel("Overview",
tags$head(
tags$style(HTML("
# A4 dashboard
.a4-canvas {
width: 1123px;
min-height: 794px;
margin: 12px auto;
padding: 16px 18px;
background: #111;
border-radius: 10px;
box-shadow: 0 2px 18px rgba(0,0,0,0.35);
}
.row-gap { row-gap: 12px; }
.pane-title {
font-weight: 700;
margin: 0 0 8px 0;
}
"))
),
# charts layout
fluidPage(
fluidRow(
column(
width = 12,
div(class = "a4-canvas",
#dashboard title
h3("Australian Anxiety Overview"),
tags$hr(),
#-------Dashboard Chart 1: anxiety level proportion------
fluidRow(class = "row-gap",
column(
width = 6,
h4(class="pane-title","Anxiety Level Proportions"),
div(class="card-box",
plotOutput("p_bar_anxiety_levels", height = "320px"))
),
#-------Dashboard Chart 2: gender difference------
column(
width = 6,
h4(class="pane-title","Gender Distribution of Anxiety – Donut"),
div(class="card-box",
plotOutput("p_donut_gender", height = "320px"))
)
),
#-------Dashboard Chart 3: anxiety count in recent years------
fluidRow(class = "row-gap",
column(
width = 12,
h4(class="pane-title","Australia – Total Anxiety Count in the Last 5 Years"),
div(class="card-box",
plotOutput("p_ts_5y", height = "320px"))
)
)
)
)
)
)
),
#interaction map page: anxiety counts in states of Australia
tabPanel("Map",
fluidPage(h4("Map Tab"), p("Placeholder for your map."))
),
#anxiety factors + treatments
tabPanel("Factors",
fluidPage(h4("Factors Tab"), p("Placeholder for factor comparisons."))
)
)
# ---------- SERVER (put everything inside here) ----------
server <- function(input, output, session){
# If you have filters in the sidebar, apply them here; otherwise, just use anxiety_au_advanced.
filtered_data <- reactive({
df <- anxiety_au_advanced
# Optional filters (only run if columns exist)
if ("Gender" %in% names(df) && input$gender_sel %in% c("Male","Female","Other","Prefer not to say")) {
df <- dplyr::filter(df, Gender == input$gender_sel)
}
if ("Age" %in% names(df) && !any(is.na(input$age_rng))) {
df <- df %>% filter(!is.na(Age), between(Age, input$age_rng[1], input$age_rng[2]))
}
df
})
# ---- Chart 1: GADE distribution (bar) ----
output$p_bar_anxiety_levels <- renderPlot({
df <- filtered_data()
validate(need("GADE_cat" %in% names(df), "Column 'GADE' not found or empty."))
# 预定义四个等级
lvl_gade <- c("Not difficult at all", "Somewhat difficult", "Very difficult", "Extremely difficult")
pdat <- df %>%
transmute(GADE_cat = factor(GADE_cat, levels = lvl_gade)) %>%
count(GADE_cat, name = "n", .drop = FALSE) %>%   # .drop = FALSE → 保留 0 次的类别
mutate(pct = if (sum(n, na.rm = TRUE) > 0) n/sum(n) else 0)
ggplot(pdat, aes(x = GADE_cat, y = pct)) +
geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = percent_format(accuracy = 1),
limits = c(0, max(pdat$pct) * 1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background   = element_rect(fill = "#111", color = NA),
panel.background  = element_rect(fill = "#111", color = NA),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#333"),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
# ---- Other two placeholders (keep inside server) ----
output$p_donut_gender <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Donut chart placeholder")
})
output$p_ts_5y <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Time series placeholder")
})
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(shinydashboard)
library(plotly)
library(leaflet)
library(tidyverse)
library(scales)
library(bslib)
library(readr)
anxiety_au <- tryCatch(
read_csv("anxiety_AUS.csv", show_col_types = FALSE, locale = locale(encoding = "UTF-8")),
error = function(e) read_csv("anxiety_AUS.csv", show_col_types = FALSE, locale = locale(encoding = "latin1"))
)
anxiety_au_advanced <- data_raw %>%
mutate(
GADE   = if ("GADE"   %in% names(.)) as.character(GADE) else NA_character_
) %>%
mutate(
# Map GADE texts to 4 buckets (robust to case/space)
GADE_cat = case_when(
str_detect(str_to_lower(GADE), "Not difficult") ~ "Not difficult at all",
str_detect(str_to_lower(GADE), "Somewhat difficult") ~ "Somewhat difficult",
str_detect(str_to_lower(GADE), "Very difficult") ~ "Very difficult",
str_detect(str_to_lower(GADE), "Extremely difficult") ~ "Extremely difficult",
TRUE ~ NA_character_
),
GADE_cat = factor(GADE_cat,
levels = c("Not difficult at all", "Somewhat difficult", "Very difficult", "Extremely difficult")
)
)
ui <- navbarPage(
# navbar title
title = "Australian Anxiety Dashboard",
theme = shinytheme("cyborg"),
collapsible = TRUE,
inverse = TRUE,
tabPanel("Overview",
tags$head(
tags$style(HTML("
# A4 dashboard
.a4-canvas {
width: 1123px;
min-height: 794px;
margin: 12px auto;
padding: 16px 18px;
background: #111;
border-radius: 10px;
box-shadow: 0 2px 18px rgba(0,0,0,0.35);
}
.row-gap { row-gap: 12px; }
.pane-title {
font-weight: 700;
margin: 0 0 8px 0;
}
"))
),
# charts layout
fluidPage(
fluidRow(
column(
width = 12,
div(class = "a4-canvas",
#dashboard title
h3("Australian Anxiety Overview"),
tags$hr(),
#-------Dashboard Chart 1: anxiety level proportion------
fluidRow(class = "row-gap",
column(
width = 6,
h4(class="pane-title","Anxiety Level Proportions"),
div(class="card-box",
plotOutput("p_bar_anxiety_levels", height = "320px"))
),
#-------Dashboard Chart 2: gender difference------
column(
width = 6,
h4(class="pane-title","Gender Distribution of Anxiety – Donut"),
div(class="card-box",
plotOutput("p_donut_gender", height = "320px"))
)
),
#-------Dashboard Chart 3: anxiety count in recent years------
fluidRow(class = "row-gap",
column(
width = 12,
h4(class="pane-title","Australia – Total Anxiety Count in the Last 5 Years"),
div(class="card-box",
plotOutput("p_ts_5y", height = "320px"))
)
)
)
)
)
)
),
#interaction map page: anxiety counts in states of Australia
tabPanel("Map",
fluidPage(h4("Map Tab"), p("Placeholder for your map."))
),
#anxiety factors + treatments
tabPanel("Factors",
fluidPage(h4("Factors Tab"), p("Placeholder for factor comparisons."))
)
)
# ---------- SERVER (put everything inside here) ----------
server <- function(input, output, session){
# If you have filters in the sidebar, apply them here; otherwise, just use anxiety_au_advanced.
filtered_data <- reactive({
df <- anxiety_au_advanced
# Optional filters (only run if columns exist)
if ("Gender" %in% names(df) && input$gender_sel %in% c("Male","Female","Other","Prefer not to say")) {
df <- dplyr::filter(df, Gender == input$gender_sel)
}
if ("Age" %in% names(df) && !any(is.na(input$age_rng))) {
df <- df %>% filter(!is.na(Age), between(Age, input$age_rng[1], input$age_rng[2]))
}
df
})
# ---- Chart 1: GADE distribution (bar) ----
output$p_bar_anxiety_levels <- renderPlot({
df <- filtered_data()
validate(need("GADE_cat" %in% names(df), "Column 'GADE' not found or empty."))
# 预定义四个等级
lvl_gade <- c("Not difficult at all", "Somewhat difficult", "Very difficult", "Extremely difficult")
pdat <- df %>%
transmute(GADE_cat = factor(GADE_cat, levels = lvl_gade)) %>%
count(GADE_cat, name = "n", .drop = FALSE) %>%   # .drop = FALSE → 保留 0 次的类别
mutate(pct = if (sum(n, na.rm = TRUE) > 0) n/sum(n) else 0)
ggplot(pdat, aes(x = GADE_cat, y = pct)) +
geom_col(width = 0.65, fill = "#4db8ff") +
geom_text(aes(label = percent(pct, accuracy = 0.1)),
vjust = -0.6, size = 4, color = "white") +
scale_y_continuous(labels = percent_format(accuracy = 1),
limits = c(0, max(pdat$pct) * 1.15 + 0.02)) +
labs(x = NULL, y = "Proportion") +
theme_minimal(base_size = 13) +
theme(
plot.background   = element_rect(fill = "#111", color = NA),
panel.background  = element_rect(fill = "#111", color = NA),
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(color = "#333"),
axis.text.x = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white")
)
})
# ---- Other two placeholders (keep inside server) ----
output$p_donut_gender <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Donut chart placeholder")
})
output$p_ts_5y <- renderPlot({
plot.new(); box(col="#666", lwd=2); title(main="Time series placeholder")
})
}
shinyApp(ui, server)
library(shiny)
library(shiny)
library(shiny)
source("~/.active-rstudio-document")
library(shiny); runApp('Desktop/untitled folder/aaa.r')
shiny::runApp('Desktop/data')
runApp('Desktop/data')
runApp('Desktop/data')
runApp('Desktop/data')
runApp('Desktop/data')
runApp('Desktop/data')
runApp('Desktop/data')
library(shiny); runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
library(shiny); runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
library(shiny); runApp('Desktop/data/appp.R')
runApp('Desktop/data/appp.R')
runApp('Desktop/data/appp.R')
runApp('Desktop/data/appp.R')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/appp.R')
runApp('Desktop/data/bpp.r')
runApp('Desktop/data/appp.R')
runApp('Desktop/data/appp.R')
setwd("~/Desktop/data")
setwd("~/Desktop/data")
setwd("~/Desktop/data")
source("ui_detail.R", local = TRUE)
library(leaflet)
library(lubridate)
library(lubridate)
setwd("~/Desktop/data")
library(shiny); runApp('bpp.R')
runApp('appp.R')
runApp('app.R')
runApp()
setwd("~/Desktop/data")
shiny::runApp()
setwd("~/Desktop/data")
setwd("~/Desktop/data")
setwd("~/Desktop/data")
runApp()
runApp()
source("app.R", local = FALSE)
exists("ui")
exists("server")
setwd("~/Desktop/data")
source("app.R")
runApp()
source("app.R")
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp()
setwd("~/Desktop/data")
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
library(shiny); runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
runApp('appp.R')
